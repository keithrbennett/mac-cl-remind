#!/usr/bin/env ruby

# For the Mac command line:
# Notifies as stdout, voice, and Mac/Growl notification after user specified delay

# Project home is https://github.com/keithrbennett/mac-cl-remind.
# See Apache License 2.0 there.


USAGE_MESSAGE = <<~HEREDOC

    Syntax is:

    remind when message

    when:    period of time to wait before notifying
             suffix can be s (seconds), m (minutes). or h (hours). Default: s
             using multiple suffixes (e.g. '1m30s') is supported
             fractions are supported (e.g. '1.5h3m')
             the 's' can be omitted for seconds, it will be assumed: e.g. '2m3' == '2m3s'
    message: can be 1..n arguments; if > 1, they will be joined with a single space

    Examples:

    remind 30m "Time to get up and stretch."
    remind 30m Time to get up and stretch.   # quoting message is not necessary
    remind 1800s Time to get up and stretch. 
    remind 1800 Time to get up and stretch.  # seconds is the default unit of time measure
    remind 0.5h Time to get up and stretch.  # fractions are ok

    You might want to add "&" to your command line to send it to the background.

HEREDOC


def exit_with_error(message)
  $stderr.puts message
  exit -1
end


# Checks that delay and message have both been specified,
# and that the delay string is correctly formed.
def validate_command_line

  exit_with_error(USAGE_MESSAGE) if ARGV.size < 2
 
  valid_duration_end_chars = %w(0 1 2 3 4 5 6 7 8 9 s S m M h H) # digits plus sShHmMÆ’
  last_char = ARGV[0][-1]
  exit_with_error(USAGE_MESSAGE) unless valid_duration_end_chars.include?(last_char)
end


def parse_delay
  string = ARGV[0].downcase
  string << 's' unless %w(h m s).include?(string[-1])

  seconds = 0

  hours_matcher   = /([.\d]+)h/.match(string)
  minutes_matcher = /([.\d]+)m/.match(string)
  seconds_matcher = /([.\d]+)s/.match(string)

  seconds += hours_matcher.captures[0].to_f   * 60 * 60 if hours_matcher
  seconds += minutes_matcher.captures[0].to_f * 60      if minutes_matcher
  seconds += seconds_matcher.captures[0].to_f           if seconds_matcher

  seconds
end


# Parses wait number string, ex: '30s', '5m'
# The rest of ARGV is the message to say
# 
# @return [number of seconds to sleep before reminding, message]
def parse_command_line

  seconds = parse_delay

  message = ARGV[1..-1].join(' ')

  [seconds, message]
end


def growl_available?
  `which growlnotify`
  $?.exitstatus == 0
end


# Uses AppleScript to display a GUI notification.
def growl_or_mac_notify(message)
  command = if growl_available?
    %Q{growlnotify -t Reminder -m "#{message}"}
  else
    osa_command = %Q{'display notification "#{message}" with title "Reminder"'}
    "osascript -e #{osa_command}"
  end

  `#{command}`
end


def stdout_message(message)
  line = '=' * 79
  <<~HEREDOC

    #{line}
    #{message}
    #{line}

  HEREDOC
end


# Notifies in 3 ways: Mac notification message, stdout, and with voice
def notify(message)
  mac_notify(message)
  puts(stdout_message(message))
  `say #{message}`
end


def main
  validate_command_line
  seconds, message = parse_command_line

  puts "Sleeping #{seconds} seconds..."
  sleep(seconds)
  growl_or_mac_notify(message)
end


main
